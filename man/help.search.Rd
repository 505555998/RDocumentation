% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Rdocumentation.R
\name{help.search}
\alias{help.search}
\title{Search the Help System on Rdocumentation or local if offline}
\usage{
help.search(pattern, fields = c("alias", "concept", "title"), apropos,
  keyword, whatis, ignore.case = TRUE, package = NULL, lib.loc = NULL,
  help.db = getOption("help.db"), verbose = getOption("verbose"),
  rebuild = FALSE, agrep = NULL, use_UTF8 = FALSE,
  types = getOption("help.search.types"))
}
\arguments{
\item{pattern}{a character string to be matched in the specified fields. If this is given, the arguments \code{apropos}, \code{keyword}, and \code{whatis} are ignored.}

\item{fields}{a character vector specifying the fields of the help database to be searched. The entries must be abbreviations of "name", "title", "alias", "concept", and "keyword",
corresponding to the help page's (file) name, its title, the topics and concepts it provides documentation for, and the keywords it can be classified to.
See below for details and how vignettes and demos are searched.}

\item{apropos}{a character string to be matched in the help page topics and title.}

\item{keyword}{a character string to be matched in the help page ‘keywords’. ‘Keywords’ are really categories: the standard categories are listed in file ‘R.home("doc")/KEYWORDS’
(see also the example) and some package writers have defined their own. If keyword is specified, agrep defaults to FALSE.}

\item{ignore.case}{a logical. If \code{TRUE}, case is ignored during matching; if \code{FALSE}, pattern matching is case sensitive. If no local matches are found, the online search is used, which is always non case-sensitive.}

\item{package}{a character vector with the names of packages to search through, or \code{NULL} in which case all available packages in the library trees specified by lib.loc are searched.}

\item{lib.loc}{a character vector describing the location of R library trees to search through, or \code{NULL}. The default value of \code{NULL} corresponds to all libraries currently known. If no matches are found in the given library,
the online search of Rdocumentation is used.}

\item{help.db}{a character string giving the file path to a previously built and saved help database, or \code{NULL}.}

\item{verbose}{logical; if TRUE, the search process is traced. Integer values are also accepted, with TRUE being equivalent to 2, and 1 being less verbose. On Windows a progress bar is shown during rebuilding, and on Unix a heartbeat is shown for verbose = 1 and a package-by-package list for verbose >= 2.}

\item{rebuild}{a logical indicating whether the help database should be rebuilt. This will be done automatically if lib.loc or the search path is changed, or if package is used and a value is not found.}

\item{agrep}{if NULL (the default unless keyword is used) and the character string to be matched consists of alphanumeric characters, whitespace or a dash only, approximate (fuzzy) matching via agrep is used unless the string has fewer than 5 characters; otherwise, it is taken to contain a regular expression to be matched via grep. If FALSE, approximate matching is not used. Otherwise, one can give a numeric or a list specifying the maximal distance for the approximate match, see argument max.distance in the documentation for agrep.}

\item{use_UTF8}{logical: should results be given in UTF-8 encoding? Also changes the meaning of regexps in agrep to be Perl regexps.}

\item{types}{a character vector listing the types of documentation to search. The entries must be abbreviations of "vignette" "help" or "demo". Results will be presented in the order specified.}

\item{field}{a single value of fields to search.

Upon installation of a package, a pre-built help.search index is serialized as ‘hsearch.rds’ in the ‘Meta’ directory (provided the package has any help pages). Vignettes are also indexed in the ‘Meta/vignette.rds’ file. These files are used to create the help search database via hsearch_db.
The arguments apropos and whatis play a role similar to the Unix commands with the same names.
Searching with agrep = FALSE will be several times faster than the default (once the database is built). However, approximate searches should be fast enough (around a second with 5000 packages installed).
If possible, the help database is saved in memory for use by subsequent calls in the session.
Note that currently the aliases in the matching help files are not displayed.
As with ?, in ?? the pattern may be prefixed with a package name followed by :: or ::: to limit the search to that package.
For help files, \keyword entries which are not among the standard keywords as listed in file ‘KEYWORDS’ in the R documentation directory are taken as concepts. For standard keyword entries different from internal, the corresponding descriptions from file ‘KEYWORDS’ are additionally taken as concepts. All \concept entries used as concepts. 
Vignettes are searched as follows. The "name" and "alias" are both the base of the vignette filename, and the "concept" entries are taken from the \VignetteKeyword entries. Vignettes are not classified using the help system "keyword" classifications. Demos are handled similarly to vignettes, without the "concept" search.}
}
\description{
Allows for searching the help system for documentation matching a given character string in the (file) name, alias, title, concept or keyword entries (or any combination thereof),
using either fuzzy matching or regular expression matching.
Names and titles of the matched help entries are displayed nicely formatted. Vignette names, titles and keywords and demo names and titles may also be searched.
}
\examples{
help.search("linear models")    # In case you forgot how to fit linear
                                # models
help.search("non-existent topic")

??utils::help  # All the topics matching "help" in the utils package


help.search("print")            # All help pages with topics or title
                                # matching 'print'
help.search(apropos = "print")  # The same

help.search(keyword = "hplot")  # All help pages documenting high-level
                                # plots.
file.show(file.path(R.home("doc"), "KEYWORDS"))  # show all keywords

## Help pages with documented topics starting with 'try'.
help.search("\\\\btry", fields = "alias")
}

